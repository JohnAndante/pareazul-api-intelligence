---
alwaysApply: false
description: Guia Completo de Routes - Roteamento HTTP
---

# üõ£Ô∏è Guia Completo de Routes - Roteamento HTTP

## üìã Resumo Executivo

Este documento descreve o padr√£o arquitetural para Routes no projeto Pare Azul API Intelligence. As Routes s√£o respons√°veis por definir os endpoints da API, aplicar middlewares de seguran√ßa e valida√ß√£o, e conectar requisi√ß√µes HTTP aos controllers apropriados.

## üéØ Prop√≥sito das Routes

### **1. Defini√ß√£o de Endpoints**

- **Mapeamento** de URLs para controllers
- **Defini√ß√£o** de m√©todos HTTP
- **Organiza√ß√£o** de rotas por dom√≠nio
- **Versionamento** de API

### **2. Aplica√ß√£o de Middlewares**

- **Autentica√ß√£o** e autoriza√ß√£o
- **Valida√ß√£o** de dados de entrada
- **Rate limiting** e seguran√ßa
- **CORS** e headers de seguran√ßa

### **3. Estrutura da API**

- **RESTful** design
- **Consist√™ncia** de endpoints
- **Documenta√ß√£o** impl√≠cita
- **Manutenibilidade** de rotas

### **4. Valida√ß√£o de Dados**

- **Validators** para valida√ß√£o inline
- **Type safety** completo
- **Mensagens de erro** descritivas
- **Transforma√ß√µes** autom√°ticas de dados

## üèóÔ∏è Estrutura Padr√£o

### **1. Template Base**

```typescript
// src/routes/[domain].route.ts
import { Router } from 'express';
import { [domain]Controller } from '../controllers/[domain].controller';
import { [middleware] } from '../middleware/[middleware].middleware';
import { validate } from '../middleware/validation.middleware';
import { [Domain]RouteValidator } from '../validators/[domain].validator';

const router = Router();

// Health check
router.get('/health', [domain]Controller.health.bind([domain]Controller));

// [Descri√ß√£o do endpoint]
router.[method](
    '/[endpoint]',
    [middleware1],
    [middleware2],
    validate([Domain]RouteValidator.[method][routeDescription]()),
    [domain]Controller.[methodName].bind([domain]Controller)
);

// [Outro endpoint]
router.[method](
    '/[endpoint]',
    [middleware1],
    validate([Domain]RouteValidator.[method][routeDescription]()),
    [domain]Controller.[methodName].bind([domain]Controller)
);

export default router;
```

### **2. Padr√µes Obrigat√≥rios**

```typescript
// ‚úÖ SEMPRE usar bind() para m√©todos de controller
router.get('/health', assistantController.health.bind(assistantController));

// ‚úÖ SEMPRE aplicar middlewares na ordem correta
router.post(
  '/webhook',
  simpleAuth, // 1. Autentica√ß√£o
  validate({ body: Schema }), // 2. Valida√ß√£o
  controller.method.bind(controller) // 3. Controller
);

// ‚ùå NUNCA esquecer o bind() nos m√©todos
router.get('/health', assistantController.health); // ‚ùå Perde contexto

// ‚ùå NUNCA aplicar middlewares na ordem errada
router.post(
  '/webhook',
  validate({ body: Schema }), // ‚ùå Valida√ß√£o antes da auth
  simpleAuth,
  controller.method.bind(controller)
);
```

## üîß Componentes Obrigat√≥rios

### **0. Padr√£o de Valida√ß√£o (NOVO)**

```typescript
// ‚úÖ NOVO PADR√ÉO: Valida√ß√£o com schemas inline
import { validate } from '../middleware/validation.middleware';
import { [Domain]RouteValidator } from '../validators/[domain].validator';

// Uso nas rotas
router.post(
    '/endpoint',
    webserviceAuth,
    validate([Domain]RouteSchema.createResource()),
    controller.createResource.bind(controller)
);

// ‚ùå PADR√ÉO ANTIGO: Valida√ß√£o com validators separados
import { [Domain]Validator } from '../validators/[domain].validator';
validate({ body: [Domain]Validator.createResource })
```

**Vantagens do Novo Padr√£o:**

- ‚úÖ **Valida√ß√£o inline** nas rotas
- ‚úÖ **Type safety** completo
- ‚úÖ **Mensagens de erro** descritivas
- ‚úÖ **Transforma√ß√µes** autom√°ticas
- ‚úÖ **Organiza√ß√£o** clara por dom√≠nio

### **1. Imports Padr√£o**

```typescript
// Imports obrigat√≥rios para todas as routes
import { Router } from 'express';
import { [domain]Controller } from '../controllers/[domain].controller';
import { [middleware] } from '../middleware/[middleware].middleware';
import { validate } from '../middleware/validation.middleware';
import { [Domain]RouteValidator } from '../validators/[domain].validator';
```

### **2. Estrutura de Rota**

```typescript
// Estrutura padr√£o de uma rota
router.[method](
    '/[endpoint]',                    // 1. Path da rota
    [middleware1],                     // 2. Middlewares de seguran√ßa
    [middleware2],                     // 3. Middlewares de valida√ß√£o
    validate([Domain]RouteSchema.[method]()), // 4. Valida√ß√£o de dados
    [domain]Controller.[methodName].bind([domain]Controller) // 5. Controller
);
```

### **3. Ordem de Middlewares**

```typescript
// Ordem obrigat√≥ria de middlewares
router.[method](
    '/[endpoint]',
    // 1. Seguran√ßa (CORS, Helmet, etc.)
    corsMiddleware,
    securityMiddleware,

    // 2. Rate Limiting
    rateLimitMiddleware,

    // 3. Autentica√ß√£o
    authMiddleware,

    // 4. Valida√ß√£o
    validate([Domain]RouteSchema.[method]()),

    // 5. Controller
    controller.method.bind(controller)
);
```

## üìä Exemplos Implementados

### **1. Routes Principal**

```typescript
// src/routes/index.ts
import { Router } from 'express';
import assistantRoutes from './assistant.route';

const router = Router();

// Health check route
router.get('/health', (req, res) => {
  res.status(200).json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    service: 'pareazul-assistant-server',
  });
});

// Chat routes
router.use('/assistant', assistantRoutes);

export default router;
```

**Caracter√≠sticas:**

- **Health check** centralizado
- **Agrega√ß√£o** de rotas por dom√≠nio
- **Estrutura** hier√°rquica clara
- **Status** padronizado

### **2. Assistant Routes**

```typescript
// src/routes/assistant.route.ts
import { Router } from 'express';
import { assistantController } from '../controllers/assistant.controller';
import { simpleAuth } from '../middleware/auth.middleware';
import { validate } from '../middleware/validation.middleware';
import { AssistantRouteValidator } from '../validators/assistant.validator';

const router = Router();

// Health check
router.get('/health', assistantController.health.bind(assistantController));

// Webhook endpoint (replicando fluxo n8n)
router.post(
  '/webhook',
  simpleAuth,
  validate(AssistantRouteValidator.postWebhook()),
  assistantController.webhook.bind(assistantController)
);

// Endpoint para processar mensagem diretamente
router.post('/message', simpleAuth, assistantController.processMessage.bind(assistantController));

export default router;
```

**Caracter√≠sticas:**

- **Middlewares** aplicados corretamente
- **Valida√ß√£o** espec√≠fica por endpoint
- **Bind** correto dos m√©todos
- **Organiza√ß√£o** clara de endpoints

## üéØ Melhores Pr√°ticas

### **1. Nomenclatura**

```typescript
// ‚úÖ BOM: Nomes descritivos e consistentes
router.get('/health', controller.health.bind(controller));
router.post('/webhook', controller.webhook.bind(controller));
router.post('/message', controller.processMessage.bind(controller));

// ‚ùå RUIM: Nomes gen√©ricos ou inconsistentes
router.get('/status', controller.health.bind(controller));
router.post('/hook', controller.webhook.bind(controller));
router.post('/msg', controller.processMessage.bind(controller));
```

### **2. Estrutura de Paths**

```typescript
// ‚úÖ BOM: Paths RESTful e consistentes
router.get('/health', controller.health.bind(controller));
router.post('/webhook', controller.webhook.bind(controller));
router.post('/message', controller.processMessage.bind(controller));

// ‚ùå RUIM: Paths inconsistentes ou n√£o-RESTful
router.get('/status', controller.health.bind(controller));
router.post('/webhook', controller.webhook.bind(controller));
router.post('/send-message', controller.processMessage.bind(controller));
```

### **3. Middlewares**

```typescript
// ‚úÖ BOM: Middlewares na ordem correta
router.post(
  '/webhook',
  simpleAuth, // 1. Autentica√ß√£o
  validate({ body: Schema }), // 2. Valida√ß√£o
  controller.webhook.bind(controller) // 3. Controller
);

// ‚ùå RUIM: Middlewares na ordem errada
router.post(
  '/webhook',
  validate({ body: Schema }), // ‚ùå Valida√ß√£o antes da auth
  simpleAuth,
  controller.webhook.bind(controller)
);
```

### **4. Valida√ß√£o**

```typescript
// ‚úÖ BOM: Valida√ß√£o espec√≠fica e clara
router.post(
  '/webhook',
  simpleAuth,
  validate(AssistantRouteValidator.postWebhook()),
  controller.webhook.bind(controller)
);

// ‚ùå RUIM: Valida√ß√£o gen√©rica ou inadequada
router.post(
  '/webhook',
  simpleAuth,
  validate({ body: {} }), // ‚ùå Schema vazio
  controller.webhook.bind(controller)
);
```

### **5. Bind de M√©todos**

```typescript
// ‚úÖ BOM: Bind correto dos m√©todos
router.get('/health', assistantController.health.bind(assistantController));
router.post('/webhook', assistantController.webhook.bind(assistantController));

// ‚ùå RUIM: Sem bind (perde contexto)
router.get('/health', assistantController.health);
router.post('/webhook', assistantController.webhook);
```

## üîÑ Fluxo de Execu√ß√£o

### **1. Requisi√ß√£o HTTP**

```
HTTP Request ‚Üí Express Router ‚Üí Middleware Stack ‚Üí Controller
```

### **2. Middleware Stack**

```
CORS ‚Üí Security ‚Üí Rate Limit ‚Üí Auth ‚Üí Validation ‚Üí Controller
```

### **3. Response Flow**

```
Controller ‚Üí Response ‚Üí Client
```

## üöÄ Vantagens da Arquitetura

### **1. Organiza√ß√£o**

- **Separa√ß√£o** por dom√≠nio
- **Estrutura** hier√°rquica clara
- **Reutiliza√ß√£o** de middlewares
- **Manutenibilidade** facilitada

### **2. Seguran√ßa**

- **Middlewares** de seguran√ßa aplicados
- **Valida√ß√£o** robusta de dados
- **Autentica√ß√£o** consistente
- **Rate limiting** implementado

### **3. Consist√™ncia**

- **Padr√£o uniforme** em todas as rotas
- **Bind** correto dos m√©todos
- **Valida√ß√£o** padronizada
- **Error handling** consistente

### **4. Escalabilidade**

- **Modularidade** por dom√≠nio
- **F√°cil adi√ß√£o** de novas rotas
- **Middleware** reutiliz√°vel
- **Versionamento** de API

## üìà Recomenda√ß√µes de Melhoria

### **1. Route Factory**

```typescript
// Factory para criar rotas padronizadas
class RouteFactory {
  static createRoute(
    method: string,
    path: string,
    controller: any,
    methodName: string,
    middlewares: any[] = [],
    validation?: any
  ) {
    const route = router[method](path);

    // Aplicar middlewares
    middlewares.forEach(middleware => route.use(middleware));

    // Aplicar valida√ß√£o se fornecida
    if (validation) {
      route.use(validate(validation));
    }

    // Aplicar controller
    route.use(controller[methodName].bind(controller));

    return route;
  }
}
```

### **2. Route Registry**

```typescript
// Registry para gerenciar rotas
class RouteRegistry {
  private routes = new Map<string, Router>();

  register(name: string, router: Router): void {
    this.routes.set(name, router);
  }

  get(name: string): Router {
    return this.routes.get(name);
  }

  getAll(): Map<string, Router> {
    return this.routes;
  }
}

export const routeRegistry = new RouteRegistry();
```

### **3. Route Documentation**

```typescript
// Documenta√ß√£o autom√°tica de rotas
interface RouteDocumentation {
  method: string;
  path: string;
  description: string;
  middlewares: string[];
  validation?: any;
  controller: string;
  methodName: string;
}

class RouteDocumenter {
  static document(router: Router): RouteDocumentation[] {
    // Extrair informa√ß√µes das rotas para documenta√ß√£o
    const routes: RouteDocumentation[] = [];

    // Implementar extra√ß√£o de informa√ß√µes
    return routes;
  }
}
```

### **4. Route Testing**

```typescript
// Utilit√°rios para teste de rotas
class RouteTester {
  static testRoute(
    router: Router,
    method: string,
    path: string,
    expectedStatus: number,
    body?: any
  ) {
    // Implementar testes automatizados de rotas
  }
}
```

## üéØ Conclus√£o

A arquitetura de Routes no projeto est√° bem estruturada e segue padr√µes consistentes. O uso de **middlewares** na ordem correta, **valida√ß√£o** robusta, **bind** correto dos m√©todos e **organiza√ß√£o** por dom√≠nio garante c√≥digo limpo e maint√≠vel.

As principais melhorias seriam implementar **Route Factory**, **Route Registry** e **Route Documentation** para tornar o sistema ainda mais robusto e documentado.

---

_Este guia deve ser atualizado conforme a evolu√ß√£o do projeto e descobertas de melhores pr√°ticas._
